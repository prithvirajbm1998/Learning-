<p><!DOCTYPE html> <html lang=&quot;en&quot;> <head>  <meta charset=&quot;UTF-8&quot;>  <meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;>  <title>Kids Word Search Puzzle</title>  <style>  /* Global resets and font */  body, html {  margin: 0;  padding: 0;  font-family: sans-serif;  background: #f0f8ff;  overflow: hidden;  }  /* Cover Page Styles */  #coverPage {  position: absolute;  top: 0; left: 0;  width: 100%;  height: 100%;  background: linear-gradient(135deg, #a1c4fd, #c2e9fb);  display: flex;  flex-direction: column;  justify-content: center;  align-items: center;  }  #coverPage h1 {  font-size: 2.5em;  color: #fff;  margin-bottom: 20px;  }  #startBtn {  position: absolute;  bottom: 50px;  padding: 20px 40px;  font-size: 1.5em;  background: #ffcc00;  border: none;  border-radius: 10px;  cursor: pointer;  box-shadow: 0 4px 8px rgba(0,0,0,0.3);  }  /* Game Page Styles */  #gamePage {  position: absolute;  top: 0; left: 0;  width: 100%;  height: 100%;  background: #fff;  display: none;  flex-direction: column;  align-items: center;  overflow: hidden;  }  #puzzleContainer {  margin-top: 20px;  display: grid;  grid-template-columns: repeat(10, 1fr);  grid-gap: 2px;  touch-action: none; /* Prevent scrolling while drawing */  }  .gridCell {  width: 35px;  height: 35px;  background: #e0e0e0;  display: flex;  justify-content: center;  align-items: center;  font-weight: bold;  user-select: none;  }  #wordList {  margin-top: 20px;  display: flex;  flex-wrap: wrap;  justify-content: center;  }  .wordItem {  background: #fff;  margin: 5px;  padding: 5px 10px;  border: 1px solid #ccc;  border-radius: 5px;  font-size: 1em;  }  .found {  background: #66bb6a;  color: #fff;  border-color: #66bb6a;  }  /* End Page Styles */  #endPage {  position: absolute;  top: 0; left: 0;  width: 100%;  height: 100%;  background: #f7f7f7;  display: none;  flex-direction: column;  align-items: center;  justify-content: center;  }  #resultBox {  background: rgba(0,0,0,0.5);  color: #fff;  padding: 20px;  border-radius: 15px;  text-align: center;  margin-bottom: 20px;  }  #endPage button {  padding: 10px 20px;  margin: 5px;  font-size: 1.2em;  border: none;  border-radius: 8px;  cursor: pointer;  }  </style> </head> <body></p>

<p> <!-- Cover Page -->  <div id=&quot;coverPage&quot;>  <h1>Fruit Word Search!</h1>  <button id=&quot;startBtn&quot;>Start</button>  </div></p>

<p> <!-- Game Page -->  <div id=&quot;gamePage&quot;>  <!-- Puzzle Grid -->  <div id=&quot;puzzleContainer&quot;></div>  <!-- List of Words to Find -->  <div id=&quot;wordList&quot;></div>  </div></p>

<p> <!-- End Page -->  <div id=&quot;endPage&quot;>  <div id=&quot;resultBox&quot;>  <h2>Game Over!</h2>  <p id=&quot;timeTaken&quot;>Time: 00:00</p>  <p id=&quot;score&quot;>Score: 0 / 5</p>  </div>  <div>  <button id=&quot;tryAgainBtn&quot;>Try Again</button>  <button id=&quot;homeBtn&quot;>Home</button>  </div>  </div></p>

<p> <script>  // Fruit names list  const fruits = [&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;, &quot;Strawberry&quot;, &quot;Grape&quot;, &quot;Watermelon&quot;,  &quot;Pineapple&quot;, &quot;Mango&quot;, &quot;Kiwi&quot;, &quot;Cherry&quot;, &quot;Lemon&quot;, &quot;Blueberry&quot;,  &quot;Raspberry&quot;, &quot;Blackberry&quot;, &quot;Papaya&quot;, &quot;Pomegranate&quot;, &quot;Guava&quot;, &quot;Jackfruit&quot;];</p>

<p> // Select 5 random fruits from the list  let chosenFruits = [];  while(chosenFruits.length < 5) {  let rand = fruits[Math.floor(Math.random()*fruits.length)];  if(!chosenFruits.includes(rand)) {  chosenFruits.push(rand.toUpperCase());  }  }</p>

<p> // Global variables for game state  let startTime, timerInterval;  const gridRows = 10, gridCols = 10;  let puzzleGrid = []; // 2D array for letters  const puzzleContainer = document.getElementById('puzzleContainer');  const wordListDiv = document.getElementById('wordList');</p>

<p> // Helper: generate random letter  function randomLetter() {  const alphabet = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;  return alphabet[Math.floor(Math.random()*alphabet.length)];  }</p>

<p> // Basic puzzle generation:  // For simplicity, we place each word horizontally at a random row and column if it fits.  // (For a more robust solution, you might wish to add vertical/diagonal placements and collision handling.)  function generatePuzzle() {  // Initialize empty grid with random letters  puzzleGrid = [];  for(let i=0; i<gridRows; i++){  let row = [];  for(let j=0; j<gridCols; j++){  row.push(randomLetter());  }  puzzleGrid.push(row);  }  // Place each chosen fruit horizontally  chosenFruits.forEach(word => {  let placed = false;  let attempts = 0;  while(!placed &amp;&amp; attempts < 100) {  attempts++;  let row = Math.floor(Math.random()*gridRows);  let col = Math.floor(Math.random()*(gridCols - word.length));  // Check if word can be placed here (overwrite is allowed for demo purposes)  for(let i=0; i<word.length; i++){  puzzleGrid[row][col+i] = word[i];  }  placed = true;  }  });  }</p>

<p> // Render the grid to the page  function renderGrid() {  puzzleContainer.innerHTML = &quot;&quot;;  for(let i=0; i<gridRows; i++){  for(let j=0; j<gridCols; j++){  const cell = document.createElement('div');  cell.classList.add('gridCell');  cell.dataset.row = i;  cell.dataset.col = j;  cell.textContent = puzzleGrid[i][j];  puzzleContainer.appendChild(cell);  }  }  }</p>

<p> // Render word list below puzzle  function renderWordList() {  wordListDiv.innerHTML = &quot;&quot;;  chosenFruits.forEach(word => {  const wordItem = document.createElement('div');  wordItem.classList.add('wordItem');  wordItem.textContent = word;  wordListDiv.appendChild(wordItem);  });  }</p>

<p> // Game timer update  function startTimer() {  startTime = Date.now();  timerInterval = setInterval(() => {  const elapsed = Date.now() - startTime;  const seconds = Math.floor(elapsed / 1000) % 60;  const minutes = Math.floor(elapsed / 60000);  document.getElementById('timeTaken').textContent = &#96;Time: ${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}&#96;;  }, 1000);  }</p>

<p> // Stop timer and return elapsed time (in seconds)  function stopTimer() {  clearInterval(timerInterval);  return Math.floor((Date.now() - startTime) / 1000);  }</p>

<p> // Variables for tracking selection (for demo, we assume simple click selection for entire word cells)  let selectedCells = [];  let foundWords = [];</p>

<p> // Dummy function to simulate checking if a selection forms one of the words.  // (A full implementation would compare the selected cells&rsquo; letters in order.)  function checkSelection() {  // For demo purposes, we simulate that a correct selection is made if 5 cells are clicked.  // In practice, implement proper selection path logic.  if(selectedCells.length >= 3) { // simplistic condition  // Assume one word is found and mark it found if not already done.  for(let word of chosenFruits) {  if(!foundWords.includes(word)) {  foundWords.push(word);  // Change color of corresponding word in list  [...wordListDiv.children].forEach(item => {  if(item.textContent === word) {  item.classList.add('found');  }  });  break;  }  }  selectedCells = [];  // If all words found, end game  if(foundWords.length === chosenFruits.length) {  endGame();  }  }  }</p>

<p> // Attach event listeners to grid cells for selection (this demo uses click events)  function addGridListeners() {  const cells = document.querySelectorAll('.gridCell');  cells.forEach(cell => {  cell.addEventListener('click', () => {  cell.style.backgroundColor = &quot;#ffeb3b&quot;; // change color on selection  selectedCells.push(cell);  checkSelection();  });  });  }</p>

<p> // End game: show end page with time and score  function endGame() {  const timeElapsed = stopTimer();  document.getElementById('score').textContent = &#96;Score: ${foundWords.length} / ${chosenFruits.length}&#96;;  // Hide game page and show end page  document.getElementById('gamePage').style.display = &quot;none&quot;;  document.getElementById('endPage').style.display = &quot;flex&quot;;  }</p>

<p> // Reset game for try again or home  function resetGame() {  selectedCells = [];  foundWords = [];  // Choose new fruits for a fresh game  chosenFruits = [];  while(chosenFruits.length < 5) {  let rand = fruits[Math.floor(Math.random()*fruits.length)];  if(!chosenFruits.includes(rand)) {  chosenFruits.push(rand.toUpperCase());  }  }  generatePuzzle();  renderGrid();  renderWordList();  addGridListeners();  document.getElementById('gamePage').style.display = &quot;flex&quot;;  document.getElementById('endPage').style.display = &quot;none&quot;;  startTimer();  }</p>

<p> // Event listeners for Start, Try Again, and Home buttons  document.getElementById('startBtn').addEventListener('click', () => {  document.getElementById('coverPage').style.display = &quot;none&quot;;  document.getElementById('gamePage').style.display = &quot;flex&quot;;  generatePuzzle();  renderGrid();  renderWordList();  addGridListeners();  startTimer();  });</p>

<p> document.getElementById('tryAgainBtn').addEventListener('click', resetGame);  document.getElementById('homeBtn').addEventListener('click', () => {  // Return to cover page  clearInterval(timerInterval);  document.getElementById('endPage').style.display = &quot;none&quot;;  document.getElementById('coverPage').style.display = &quot;flex&quot;;  });  </script> </body> </html></p>